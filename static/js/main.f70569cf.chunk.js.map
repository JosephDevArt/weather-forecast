{"version":3,"sources":["components/LoadingSpinner/LoadingSpinner.tsx","components/MainInfo/Current/Current.tsx","store/weather/actions.ts","store/weather/types.ts","store/time/actions.ts","store/time/types.ts","store/app/actions.ts","store/app/types.ts","components/MainInfo/Form/Form.tsx","components/MainInfo/TimeLine/TimeStamp/TimeStamp.tsx","components/MainInfo/TimeLine/TimeLine.tsx","components/MainInfo/MainInfo.tsx","components/UnitsSwitcher/UnitsSwitcher.tsx","store/switcher/actions.ts","store/switcher/types.ts","components/SideBar/WeatherDetails/WeatherDetail/WeatherDetail.tsx","components/SideBar/WeatherDetails/WeatherDetails.tsx","components/SideBar/NextDaysForecast/NextDay/NextDay.tsx","components/SideBar/NextDaysForecast/NextDaysForecast.tsx","components/SideBar/SideBar.tsx","App.tsx","store/app/reducers.ts","store/helperFunctions.js","store/weather/reducers.ts","store/time/reducers.ts","store/switcher/reducers.ts","store/location/reducers.ts","store/configureStore.ts","index.js"],"names":["LoadingSpinner","isFetching","style","display","className","Current","useSelector","state","city","location","country","day","time","month","year","date","temp","Math","round","weather","currentWeather","main","icon","description","isChecked","units","src","alt","loadWeatherSuccess","payload","type","getWeather","args","dispatch","getState","a","errorMessage","app","isGeoProvided","api_key","process","setIsFetching","length","fetch","response","lat","lon","ok","json","data","list","batch","setIsGeolocationProvided","setErrorMessage","statusText","Error","coord","getTime","lng","isInitialized","console","log","formatted","setIsInitialized","error","Form","input","useRef","useDispatch","onSubmit","e","preventDefault","node","current","blur","value","action","ref","placeholder","disabled","TimeStamp","TimeLine","timeLine","shallowEqual","map","item","index","key","MainInfo","UnitsSwitcher","onChange","htmlFor","WeatherDetail","text","WeatherDetails","weatherDetails","humidity","pressure","sea_level","wind","speed","sunrise","sunset","Object","keys","NextDay","NextDaysForecast","nextDays","SideBar","App","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Promise","all","then","fail","initialState","appReducer","convertMilisecToTime","milisec","Date","getMinutes","toString","getUTCHours","transformWeatherData","formattedWeatherData","forEach","hasOwnProperty","dt_txt","slice","createTimeLineWeather","timeLineWeather","k","key2","push","days","createNextDaysWeather","nextDaysWeather","dayOfWeek","getDay","avg","keysAmount","weatherReducer","timeReducer","replace","dateArray","toDateString","split","sunriseTime","sunsetTime","switcherReducer","locationReducer","name","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunkMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f70569cf.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\n\r\ntype Props = {\r\n  isFetching: boolean;\r\n};\r\n\r\nconst LoadingSpinner: FC<Props> = ({ isFetching }) => {\r\n  return (\r\n    <div style={{ display: isFetching ? \"\" : \"none\" }} className=\"loading\">\r\n      <div>\r\n        <div className=\"c1\"></div>\r\n        <div className=\"c2\"></div>\r\n        <div className=\"c3\"></div>\r\n        <div className=\"c4\"></div>\r\n      </div>\r\n      <span>loading</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import React, { FC } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst Current: FC<any> = () => {\r\n  const {\r\n    city,\r\n    country,\r\n    day,\r\n    month,\r\n    date,\r\n    year,\r\n    time,\r\n    temp,\r\n    icon,\r\n    description,\r\n    isChecked,\r\n  } = useSelector((state: RootState) => ({\r\n    city: state.location.city,\r\n    country: state.location.country,\r\n    day: state.time.day,\r\n    month: state.time.month,\r\n    year: state.time.year,\r\n    date: state.time.date,\r\n    time: state.time.time,\r\n    temp: Math.round(state.weather.currentWeather.main.temp),\r\n    icon: state.weather.currentWeather.weather[0].icon,\r\n    description: state.weather.currentWeather.weather[0].description,\r\n    isChecked: state.units.isChecked,\r\n  }));\r\n\r\n  return (\r\n    <div className=\"current\">\r\n      <h1>\r\n        {city}, {country}\r\n      </h1>\r\n      <p>\r\n        {time} {day}, {date} {month} {year}\r\n      </p>\r\n      <img src={`https://openweathermap.org/img/wn/${icon}@4x.png`} alt=\"\" />\r\n      <h2>{description}</h2>\r\n      <h3>\r\n        {temp} <span> {isChecked ? \"℉\" : \"℃\"}</span>\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Current;\r\n","import { batch } from \"react-redux\";\r\n\r\nimport {\r\n  WeatherActionTypes,\r\n  LOAD_WEATHER_SUCCESS,\r\n  WeatherPayload,\r\n} from \"./types\";\r\n\r\nimport { AppThunk } from \"../rootTypes\";\r\n\r\nimport { setIsFetching, setIsGeolocationProvided } from \"../app/actions\";\r\n\r\nimport { setErrorMessage } from \"./../app/actions\";\r\n\r\n//loadWeatherSuccess action is being listened by 3 reduers (weatherRed,timeRed,locationRed)\r\nexport const loadWeatherSuccess = (\r\n  payload: WeatherPayload\r\n): WeatherActionTypes => ({\r\n  type: LOAD_WEATHER_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const getWeather = (\r\n  ...args: Array<number | string>\r\n): AppThunk<Promise<number[]>> => async (dispatch, getState) => {\r\n  const isChecked = getState().units.isChecked; //make and api call with fahrenheit if isChecked==true and with celsius if isChecked==false\r\n  const errorMessage = getState().app.errorMessage;\r\n  const isGeoProvided = getState().app.isGeoProvided;\r\n\r\n  const api_key = process.env.REACT_APP_WEATHER_API_KEY;\r\n\r\n  dispatch(setIsFetching(true));\r\n\r\n  //----BELOW---- api call that depends on argument that was provided for getWeather(...args)\r\n  let response: any;\r\n  if (args.length == 1) {\r\n    //if city was provided\r\n    var city = args[0];\r\n    response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${api_key}&units=${\r\n        isChecked ? \"imperial\" : \"metric\"\r\n      }`\r\n    );\r\n  } else {\r\n    //if coordinates were provided\r\n    const lat = args[0];\r\n    const lon = args[1];\r\n\r\n    response = await fetch(\r\n      `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${api_key}&units=${\r\n        isChecked ? \"imperial\" : \"metric\"\r\n      }`\r\n    );\r\n  }\r\n  //----ABOVE---- api call that depends on argument that was provided for getWeather(...args)\r\n\r\n  if (response.ok) {\r\n    var data = await response.json();\r\n\r\n    const payload: WeatherPayload = {\r\n      city: data.city,\r\n      weather: data.list,\r\n    };\r\n\r\n    batch(() => {\r\n      !isGeoProvided && dispatch(setIsGeolocationProvided(true));\r\n      dispatch(loadWeatherSuccess(payload));\r\n      dispatch(setIsFetching(false));\r\n      errorMessage && dispatch(setErrorMessage(\"\"));\r\n    });\r\n  } else {\r\n    batch(() => {\r\n      dispatch(setIsFetching(false));\r\n      dispatch(setErrorMessage(response.statusText));\r\n    });\r\n    throw Error;\r\n  }\r\n\r\n  const { lat, lon }: { lat: number; lon: number } = data.city.coord; //latitude longitude\r\n  return [lat, lon];\r\n};\r\n","export const LOAD_WEATHER_SUCCESS = \"LOAD_WEATHER_SECCESS\";\r\n\r\nexport type TimeStamp = {\r\n  temp: number;\r\n  time: string;\r\n  icon: string;\r\n};\r\n\r\nexport type NextDay = {\r\n  day: string;\r\n  temp: number;\r\n};\r\n\r\ntype City = {\r\n  name: string;\r\n  country: string;\r\n  sunrise: number;\r\n  sunset: number;\r\n  coord: { lat: number; lon: number };\r\n};\r\n\r\ntype Weather = {\r\n  dt_txt: string;\r\n  main: {\r\n    humidity: number;\r\n    pressure: number;\r\n    sea_level: number;\r\n    temp: number;\r\n  };\r\n  weather: [\r\n    {\r\n      description: string;\r\n      icon: string;\r\n      main: string;\r\n    }\r\n  ];\r\n  wind: {\r\n    speed: number;\r\n  };\r\n};\r\n\r\nexport type WeatherState = {\r\n  readonly currentWeather: Weather;\r\n  readonly timeLine: TimeStamp[];\r\n  readonly nextDays: NextDay[];\r\n  isFetching?: boolean;\r\n};\r\n\r\nexport type WeatherPayload = {\r\n  city: City;\r\n  weather: Weather[];\r\n};\r\n\r\ntype LoadWeatherSuccessAction = {\r\n  type: typeof LOAD_WEATHER_SUCCESS;\r\n  payload: WeatherPayload;\r\n};\r\n\r\nexport type WeatherActionTypes = LoadWeatherSuccessAction;\r\n","import { batch } from \"react-redux\";\r\n\r\nimport { TimeActionTypes, LOAD_TIME_SUCCESS } from \"./types\";\r\n\r\nimport { AppThunk } from \"../rootTypes\";\r\nimport { setIsFetching, setIsInitialized } from \"../app/actions\";\r\n\r\nexport const loadTimeSuccess = (time: string): TimeActionTypes => ({\r\n  type: LOAD_TIME_SUCCESS,\r\n  time,\r\n});\r\n\r\nexport const getTime = (lat: number, lng: number): AppThunk<void> => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const isInitialized = getState().app.isInitialized;\r\n\r\n  const api_key = process.env.REACT_APP_TIME_API_KEY;\r\n\r\n  dispatch(setIsFetching(true));\r\n\r\n  const response = await fetch(\r\n    `https://api.timezonedb.com/v2.1/get-time-zone?key=${api_key}&format=json&by=position&lat=${lat}&lng=${lng}`\r\n  );\r\n\r\n  const data = await response.json();\r\n  console.log(data);\r\n  batch(() => {\r\n    dispatch(loadTimeSuccess(data.formatted));\r\n    dispatch(setIsFetching(false));\r\n    !isInitialized && dispatch(setIsInitialized(true));\r\n  });\r\n};\r\n","export const LOAD_TIME_SUCCESS = \"LOAD_TIME_SUCCESS\";\r\n\r\nexport type TimeState = {\r\n  day: string;\r\n  month: string;\r\n  date: string;\r\n  year: string;\r\n  time: string;\r\n  sunrise: string;\r\n  sunset: string;\r\n};\r\n\r\ntype LoadTimeSuccessAction = {\r\n  type: typeof LOAD_TIME_SUCCESS;\r\n  time: string;\r\n};\r\n\r\nexport type TimeActionTypes = LoadTimeSuccessAction;\r\n","import {\r\n  SET_IS_INITIALISED,\r\n  SET_IS_FETCHING,\r\n  SET_ERROR_MESSAGE,\r\n  AppActionTypes,\r\n  SET_IS_GEOLOCATION_PROVIDED,\r\n} from \"./types\";\r\nimport { AppThunk } from \"../rootTypes\";\r\n\r\nimport { getWeather } from \"../weather/actions\";\r\nimport { getTime } from \"../time/actions\";\r\n\r\nexport const setIsInitialized = (payload: boolean): AppActionTypes => ({\r\n  type: SET_IS_INITIALISED,\r\n  payload,\r\n});\r\n\r\nexport const setIsFetching = (payload: boolean): AppActionTypes => ({\r\n  type: SET_IS_FETCHING,\r\n  payload,\r\n});\r\n\r\nexport const setErrorMessage = (error: string): AppActionTypes => ({\r\n  type: SET_ERROR_MESSAGE,\r\n  error,\r\n});\r\n\r\nexport const setIsGeolocationProvided = (payload: boolean): AppActionTypes => ({\r\n  type: SET_IS_GEOLOCATION_PROVIDED,\r\n  payload,\r\n});\r\n\r\nexport const getWeatherAndTime = (city: string): AppThunk<void> => async (\r\n  dispatch\r\n) => {\r\n  const coord: number[] = await dispatch(getWeather(city));\r\n  await dispatch(getTime(coord[0], coord[1])); //[latitude,longitude]\r\n};\r\n\r\nexport const initializeApp = (): AppThunk<void> => async (dispatch) => {\r\n  navigator.geolocation.getCurrentPosition(\r\n    function (position) {\r\n      dispatch(setIsGeolocationProvided(true));\r\n\r\n      const lat = position.coords.latitude;\r\n      const lon = position.coords.longitude;\r\n\r\n      const weather = dispatch(getWeather(lat, lon));\r\n      const time = dispatch(getTime(lat, lon));\r\n\r\n      Promise.all([weather, time]).then(() => {\r\n        dispatch(setIsInitialized(true));\r\n      });\r\n    },\r\n    function (fail) {\r\n      dispatch(setIsGeolocationProvided(false));\r\n    }\r\n  );\r\n};\r\n","export const SET_IS_INITIALISED = \"SET_IS_INITIALIZED\";\r\nexport const SET_IS_FETCHING = \"SET_IS_FETCHING\";\r\nexport const SET_ERROR_MESSAGE = \"SET_ERROR_MESSAGE\";\r\nexport const SET_IS_GEOLOCATION_PROVIDED = \"SET_IS_GEOLOCATION_PROVIDED\";\r\n\r\nexport type AppState = {\r\n  isInitialized: boolean;\r\n  isFetching: boolean;\r\n  errorMessage: string;\r\n  isGeoProvided: boolean;\r\n};\r\n\r\ntype SetIsInitialized = {\r\n  type: typeof SET_IS_INITIALISED;\r\n  payload: boolean;\r\n};\r\n\r\ntype SetIsFetching = {\r\n  type: typeof SET_IS_FETCHING;\r\n  payload: boolean;\r\n};\r\n\r\ntype SetErrorMessage = {\r\n  type: typeof SET_ERROR_MESSAGE;\r\n  error: string;\r\n};\r\n\r\ntype SetIsGeolocationIsProvided = {\r\n  type: typeof SET_IS_GEOLOCATION_PROVIDED;\r\n  payload: boolean;\r\n};\r\n\r\nexport type AppActionTypes =\r\n  | SetIsInitialized\r\n  | SetIsFetching\r\n  | SetErrorMessage\r\n  | SetIsGeolocationIsProvided;\r\n","import React, { useRef, FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { getWeatherAndTime } from \"./../../../store/app/actions\";\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst Form: FC<any> = () => {\r\n  const input = useRef<HTMLInputElement>(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isFetching, errorMessage, isGeoProvided } = useSelector(\r\n    (state: RootState) => ({\r\n      isFetching: state.app.isFetching,\r\n      errorMessage: state.app.errorMessage,\r\n      isGeoProvided: state.app.isGeoProvided,\r\n    })\r\n  );\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n\r\n    const node = input.current;\r\n    node?.blur();\r\n\r\n    dispatch(getWeatherAndTime(node?.value as string));\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={isGeoProvided ? \"\" : \"geo-not-provided\"}\r\n      onSubmit={handleSubmit}\r\n      action=\"\"\r\n    >\r\n      <input ref={input} type=\"text\" placeholder=\"city\" />\r\n      <p>{errorMessage}</p>\r\n      <button disabled={isFetching} type=\"submit\">\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { FC } from \"react\";\r\n\r\ntype Props = {\r\n  temp: number;\r\n  time: string;\r\n  icon: string;\r\n  isChecked: boolean;\r\n};\r\n\r\nconst TimeStamp: FC<Props> = ({ time, temp, icon, isChecked }) => {\r\n  return (\r\n    <div className=\"time-stamp\">\r\n      <div className=\"temp-at-specific-hour\">\r\n        <img src={`https://openweathermap.org/img/wn/${icon}@4x.png`} alt=\"\" />\r\n        <p>\r\n          {temp}\r\n          {isChecked ? \"℉\" : \"℃\"}\r\n        </p>\r\n      </div>\r\n      <span>{time}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeStamp;\r\n","import React, { FC } from \"react\";\r\nimport { useSelector, shallowEqual } from \"react-redux\";\r\n\r\nimport TimeStamp from \"./TimeStamp/TimeStamp\";\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst TimeLine: FC<any> = () => {\r\n  const { timeLine, isChecked } = useSelector(\r\n    (state: RootState) => ({\r\n      timeLine: state.weather.timeLine,\r\n      isChecked: state.units.isChecked,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  return (\r\n    <div className=\"cont\">\r\n      <div className=\"time-line\">\r\n        {timeLine.map((item, index) => (\r\n          <TimeStamp key={index} isChecked={isChecked} {...item} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeLine;\r\n","import React, { FC } from \"react\";\r\n\r\nimport Current from \"./Current/Current\";\r\nimport Form from \"./Form/Form\";\r\nimport TimeLine from \"./TimeLine/TimeLine\";\r\n\r\nconst MainInfo: FC<any> = () => {\r\n  return (\r\n    <div className=\"main-info\">\r\n      <Form />\r\n      <Current />\r\n      <TimeLine />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainInfo;\r\n","import React, { FC } from \"react\";\r\nimport { useSelector, batch } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { setIsChecked } from \"./../../store/switcher/actions\";\r\nimport { getWeather } from \"../../store/weather/actions\";\r\nimport { RootState } from \"../../store/rootTypes\";\r\n\r\nconst UnitsSwitcher: FC<any> = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const city = useSelector((state: RootState) => state.location.city);\r\n\r\n  const toggleCheck = () => {\r\n    batch(() => {\r\n      dispatch(setIsChecked());\r\n      dispatch(getWeather(city));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"temp-units\">\r\n      <p>Weather forecast</p>\r\n      <div className=\"toggle\">\r\n        <input onChange={toggleCheck} type=\"checkbox\" />\r\n        <label htmlFor=\"\">℃</label>\r\n        <label htmlFor=\"\">℉</label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnitsSwitcher;\r\n","import { SET_IS_CHECKED, SwitcherActionTypes } from \"./types\";\r\n\r\nexport const setIsChecked = (): SwitcherActionTypes => ({\r\n  type: SET_IS_CHECKED,\r\n});\r\n","export const SET_IS_CHECKED = \"SET_IS_CHECKED\";\r\n\r\nexport type SwitcherState = {\r\n  isChecked: boolean;\r\n};\r\n\r\ntype SetIsChecked = {\r\n  type: typeof SET_IS_CHECKED;\r\n};\r\n\r\nexport type SwitcherActionTypes = SetIsChecked;\r\n","import React, { FC } from \"react\";\r\n\r\ntype Props = {\r\n  text: string;\r\n  value: string;\r\n};\r\n\r\nconst WeatherDetail: FC<Props> = ({ text, value }) => {\r\n  return (\r\n    <li>\r\n      {text}: <span>{value}</span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default WeatherDetail;\r\n","import React, { FC } from \"react\";\r\nimport { useSelector, shallowEqual } from \"react-redux\";\r\n\r\nimport WeatherDetail from \"./WeatherDetail/WeatherDetail\";\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst WeatherDetails: FC<any> = () => {\r\n  type WeatherDetails = {\r\n    humidity: number;\r\n    pressure: number;\r\n    [\"sea level\"]: number;\r\n    [\"wind speed\"]: number;\r\n    sunrise: string;\r\n    sunset: string;\r\n    [propName: string]: any;\r\n  };\r\n\r\n  const weatherDetails: WeatherDetails = useSelector(\r\n    (state: RootState) => ({\r\n      humidity: state.weather.currentWeather.main.humidity,\r\n      pressure: state.weather.currentWeather.main.pressure,\r\n      [\"sea level\"]: state.weather.currentWeather.main.sea_level,\r\n      [\"wind speed\"]: state.weather.currentWeather.wind.speed,\r\n      sunrise: state.time.sunrise,\r\n      sunset: state.time.sunset,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  return (\r\n    <div className=\"weather-details\">\r\n      <h4>Weather details</h4>\r\n      <ul>\r\n        {Object.keys(weatherDetails).map((item, index) => (\r\n          <WeatherDetail key={index} text={item} value={weatherDetails[item]} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDetails;\r\n","import React, { FC } from \"react\";\r\n\r\ntype Props = {\r\n  day: string;\r\n  temp: number;\r\n  isChecked: boolean;\r\n};\r\n\r\nconst NextDay: FC<Props> = ({ day, temp, isChecked }) => {\r\n  return (\r\n    <li>\r\n      {day}\r\n      <span>\r\n        {temp} {isChecked ? \"℉\" : \"℃\"}\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NextDay;\r\n","import React from \"react\";\r\n\r\nimport { useSelector, shallowEqual } from \"react-redux\";\r\n\r\nimport NextDay from \"./NextDay/NextDay\";\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst NextDaysForecast = () => {\r\n  const { nextDays, isChecked } = useSelector(\r\n    (state: RootState) => ({\r\n      nextDays: state.weather.nextDays,\r\n      isChecked: state.units.isChecked,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  return (\r\n    <div className=\"next-days-forecast\">\r\n      <h4>Next days</h4>\r\n      <ul>\r\n        {nextDays.map((item, index) => (\r\n          <NextDay key={index} isChecked={isChecked} {...item} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NextDaysForecast;\r\n","import React, { FC } from \"react\";\r\n\r\nimport WeatherDetails from \"./WeatherDetails/WeatherDetails\";\r\nimport NextDaysForecast from \"./NextDaysForecast/NextDaysForecast\";\r\n\r\nconst SideBar: FC<any> = () => {\r\n  return (\r\n    <aside className=\"side-bar\">\r\n      <WeatherDetails />\r\n      <NextDaysForecast />\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React, { useEffect, FC } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./index.scss\";\n\nimport LoadingSpinner from \"./components/LoadingSpinner/LoadingSpinner\";\nimport MainInfo from \"./components/MainInfo/MainInfo\";\nimport UnitsSwitcher from \"./components/UnitsSwitcher/UnitsSwitcher\";\nimport SideBar from \"./components/SideBar/SideBar\";\nimport Form from \"./components/MainInfo/Form/Form\";\n\nimport { initializeApp } from \"./store/app/actions\";\n\nimport { RootState } from \"./store/rootTypes\";\n\nconst App: FC<any> = () => {\n  const { isInitialized, isFetching, isGeoProvided } = useSelector(\n    (state: RootState) => ({\n      isInitialized: state.app.isInitialized,\n      isFetching: state.app.isFetching,\n      isGeoProvided: state.app.isGeoProvided,\n    })\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initializeApp());\n  }, []);\n\n  if (isGeoProvided) {\n    if (isInitialized) {\n      return (\n        <main className=\"App\">\n          <LoadingSpinner isFetching={isFetching} />\n          <MainInfo />\n          <UnitsSwitcher />\n          <SideBar />\n        </main>\n      );\n    } else {\n      return <LoadingSpinner isFetching={isFetching} />;\n    }\n  } else {\n    return <Form />;\n  }\n};\n\nexport default App;\n","import {\r\n  SET_IS_INITIALISED,\r\n  AppActionTypes,\r\n  AppState,\r\n  SET_IS_FETCHING,\r\n  SET_ERROR_MESSAGE,\r\n  SET_IS_GEOLOCATION_PROVIDED,\r\n} from \"./types\";\r\n\r\nconst initialState: AppState = {\r\n  isInitialized: false,\r\n  isFetching: false,\r\n  errorMessage: \"\",\r\n  isGeoProvided: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionTypes): AppState => {\r\n  switch (action.type) {\r\n    case SET_IS_INITIALISED:\r\n      return {\r\n        ...state,\r\n        isInitialized: true,\r\n      };\r\n\r\n    case SET_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.payload,\r\n      };\r\n    case SET_ERROR_MESSAGE:\r\n      return {\r\n        ...state,\r\n        errorMessage: action.error,\r\n      };\r\n\r\n    case SET_IS_GEOLOCATION_PROVIDED:\r\n      return {\r\n        ...state,\r\n        isGeoProvided: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default appReducer;\r\n","export const convertMilisecToTime = (milisec) => {\r\n  //conver milisec to hh:mm format\r\n  const day = new Date(milisec * 1000);\r\n  if (day.getMinutes().toString().length != 2) {\r\n    return day.getUTCHours() + 3 + \":0\" + day.getMinutes(); //+3 so it will be +0300 GMT\r\n  } else {\r\n    return day.getUTCHours() + 3 + \":\" + day.getMinutes(); //+3 so it will be +0300 GMT\r\n  }\r\n};\r\n\r\n//---- BELOW ---- divide data from a weather api call into separate objects that are easier to work with\r\n\r\nexport const transformWeatherData = (data) => {\r\n  //refractor data from a weather api call into an object that is easier to work with\r\n  const formattedWeatherData = {};\r\n  data.forEach((item) => {\r\n    if (formattedWeatherData.hasOwnProperty(item.dt_txt.slice(0, 10))) {\r\n      formattedWeatherData[item.dt_txt.slice(0, 10)][item.dt_txt.slice(11)] = {\r\n        temp: item.main.temp,\r\n        icon: item.weather[0].icon,\r\n      };\r\n    } else {\r\n      formattedWeatherData[item.dt_txt.slice(0, 10)] = new Object();\r\n      formattedWeatherData[item.dt_txt.slice(0, 10)][item.dt_txt.slice(11)] = {\r\n        temp: item.main.temp,\r\n        icon: item.weather[0].icon,\r\n      };\r\n    }\r\n  });\r\n  return formattedWeatherData;\r\n};\r\n\r\nexport const createTimeLineWeather = (data) => {\r\n  //push into 'timeLineWeather array' 8 time stamps for displaying them on a timeLine\r\n  data = transformWeatherData(data);\r\n\r\n  const timeLineWeather = [];\r\n  let k = 0;\r\n  for (let key in data) {\r\n    for (let key2 in data[key]) {\r\n      if (k == 9) {\r\n        break;\r\n      }\r\n      k++;\r\n      timeLineWeather.push({\r\n        time: key2.slice(0, 5),\r\n        temp: Math.round(data[key][key2].temp),\r\n        icon: data[key][key2].icon,\r\n      });\r\n    }\r\n  }\r\n  return timeLineWeather;\r\n};\r\n\r\nvar days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nexport const createNextDaysWeather = (data) => {\r\n  //push into 'nextDaysWeather array' objects that contain 'name of a day' and 'temperature information'\r\n  data = transformWeatherData(data);\r\n\r\n  const nextDaysWeather = [];\r\n  for (let key in data) {\r\n    let day = new Date(key);\r\n    let dayOfWeek = days[day.getDay()];\r\n    let avg = 0;\r\n    let keysAmount = 0;\r\n    for (let key2 in data[key]) {\r\n      avg += data[key][key2].temp;\r\n      keysAmount += 1;\r\n    }\r\n    nextDaysWeather.push({\r\n      day: dayOfWeek,\r\n      temp: Math.round(avg / keysAmount),\r\n    });\r\n  }\r\n  return nextDaysWeather;\r\n};\r\n\r\n//---- ABOVE ---- divide data from a weather api call into separate objects that are easier to work with\r\n","import {\r\n  createNextDaysWeather,\r\n  createTimeLineWeather,\r\n} from \"./../helperFunctions\";\r\n\r\nimport {\r\n  WeatherState,\r\n  LOAD_WEATHER_SUCCESS,\r\n  WeatherActionTypes,\r\n} from \"./types\";\r\n\r\nconst initialState: WeatherState = {\r\n  currentWeather: {\r\n    dt_txt: \"\",\r\n    main: {\r\n      humidity: 0,\r\n      pressure: 0,\r\n      sea_level: 0,\r\n      temp: 0,\r\n    },\r\n    weather: [\r\n      {\r\n        description: \"\",\r\n        icon: \"\",\r\n        main: \"\",\r\n      },\r\n    ],\r\n    wind: {\r\n      speed: 0,\r\n    },\r\n  },\r\n  timeLine: [],\r\n  nextDays: [],\r\n  isFetching: false,\r\n};\r\n\r\nconst weatherReducer = (\r\n  state = initialState,\r\n  action: WeatherActionTypes\r\n): WeatherState => {\r\n  switch (action.type) {\r\n    case LOAD_WEATHER_SUCCESS:\r\n      const timeLine = createTimeLineWeather(action.payload.weather);\r\n      const nextDays = createNextDaysWeather(action.payload.weather);\r\n      return {\r\n        ...state,\r\n        currentWeather: action.payload.weather[0],\r\n        timeLine: timeLine,\r\n        nextDays: nextDays,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default weatherReducer;\r\n","import { TimeState, LOAD_TIME_SUCCESS, TimeActionTypes } from \"./types\";\r\nimport { LOAD_WEATHER_SUCCESS, WeatherActionTypes } from \"./../weather/types\";\r\n\r\nimport { convertMilisecToTime } from \"./../helperFunctions\";\r\n\r\nconst initialState: TimeState = {\r\n  day: \"\",\r\n  month: \"\",\r\n  date: \"\",\r\n  year: \"\",\r\n  time: \"\",\r\n  sunrise: \"\",\r\n  sunset: \"\",\r\n};\r\n\r\nconst timeReducer = (\r\n  state = initialState,\r\n  action: TimeActionTypes | WeatherActionTypes\r\n): TimeState => {\r\n  switch (action.type) {\r\n    case LOAD_TIME_SUCCESS: {\r\n      const day = new Date(action.time.replace(/ /g, \"T\")); //replace function makes it work in safari browser\r\n      const dateArray = day.toDateString().split(\" \");\r\n      const time = action.time.slice(11, 16); //extract hh:mm only\r\n\r\n      return {\r\n        ...state,\r\n        day: dateArray[0],\r\n        month: dateArray[1],\r\n        date: dateArray[2],\r\n        year: dateArray[3],\r\n        time: time,\r\n      };\r\n    }\r\n    case LOAD_WEATHER_SUCCESS: {\r\n      const sunriseTime = convertMilisecToTime(action.payload.city.sunrise);\r\n      const sunsetTime = convertMilisecToTime(action.payload.city.sunset);\r\n      return {\r\n        ...state,\r\n        sunrise: sunriseTime,\r\n        sunset: sunsetTime,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default timeReducer;\r\n","import { SwitcherState, SwitcherActionTypes, SET_IS_CHECKED } from \"./types\";\r\n\r\nconst initialState: SwitcherState = {\r\n  isChecked: false,\r\n};\r\n\r\nconst switcherReducer = (\r\n  state = initialState,\r\n  action: SwitcherActionTypes\r\n): SwitcherState => {\r\n  switch (action.type) {\r\n    case SET_IS_CHECKED: {\r\n      return {\r\n        isChecked: !state.isChecked,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default switcherReducer;\r\n","import { WeatherActionTypes, LOAD_WEATHER_SUCCESS } from \"../weather/types\";\r\nimport { LocationState } from \"./types\";\r\n\r\nconst initialState: LocationState = {\r\n  country: \"\",\r\n  city: \"\",\r\n};\r\n\r\nconst locationReducer = (\r\n  state = initialState,\r\n  action: WeatherActionTypes\r\n): LocationState => {\r\n  switch (action.type) {\r\n    case LOAD_WEATHER_SUCCESS: {\r\n      const { name: city, country } = action.payload.city;\r\n      return {\r\n        country: country,\r\n        city: city,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default locationReducer;\r\n","import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport appReducer from \"./app/reducers\";\r\nimport weatherReducer from \"./weather/reducers\";\r\nimport timeReducer from \"./time/reducers\";\r\nimport switcherReducer from \"./switcher/reducers\";\r\nimport locationReducer from \"./location/reducers\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  app: appReducer,\r\n  location: locationReducer,\r\n  weather: weatherReducer,\r\n  time: timeReducer,\r\n  units: switcherReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  compose(\r\n    applyMiddleware(thunkMiddleware),\r\n    ((window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n      (window as any).__REDUX_DEVTOOLS_EXTENSION__()) ||\r\n      compose\r\n  )\r\n);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport { store } from \"./store/configureStore\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}