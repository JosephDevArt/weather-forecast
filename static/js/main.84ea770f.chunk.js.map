{"version":3,"sources":["components/LoadingSpinner/LoadingSpinner.tsx","store/weather/actions.ts","store/weather/types.ts","store/time/actions.ts","store/time/types.ts","store/app/actions.ts","store/app/types.ts","components/MainInfo/Current/Current.tsx","components/MainInfo/Form/Form.tsx","components/MainInfo/TimeLine/TimeStamp/TimeStamp.tsx","components/MainInfo/TimeLine/TimeLine.tsx","components/MainInfo/MainInfo.tsx","components/UnitsSwitcher/UnitsSwitcher.tsx","store/switcher/actions.ts","store/switcher/types.ts","components/SideBar/WeatherDetails/WeatherDetail/WeatherDetail.tsx","components/SideBar/WeatherDetails/WeatherDetails.tsx","components/SideBar/NextDaysForecast/NextDay/NextDay.tsx","components/SideBar/NextDaysForecast/NextDaysForecast.tsx","components/SideBar/SideBar.tsx","App.tsx","store/app/reducers.ts","store/helperFunctions.js","store/weather/reducers.ts","store/time/reducers.ts","store/switcher/reducers.ts","store/location/reducers.ts","store/configureStore.ts","index.js"],"names":["LoadingSpinner","isFetching","style","display","className","loadWeatherSuccess","payload","type","getWeather","city","dispatch","getState","a","isChecked","units","errorMessage","app","process","setIsFetching","fetch","response","ok","json","data","weather","list","batch","setErrorMessage","statusText","Error","coord","lat","lon","getTime","lng","time","formatted","error","getWeatherAndTime","Current","useSelector","state","location","country","day","month","year","date","temp","Math","round","currentWeather","main","icon","description","src","alt","Form","input","useRef","useDispatch","onSubmit","e","preventDefault","node","current","value","action","ref","placeholder","disabled","TimeStamp","TimeLine","timeLine","shallowEqual","map","item","index","key","MainInfo","UnitsSwitcher","onChange","htmlFor","WeatherDetail","text","WeatherDetails","weatherDetails","humidity","pressure","sea_level","wind","speed","sunrise","sunset","Object","keys","NextDay","NextDaysForecast","nextDays","SideBar","App","isInitialized","useEffect","initialState","appReducer","convertMilisecToTime","milisec","Date","getMinutes","toString","length","getHours","transformWeatherData","formattedWeatherData","forEach","hasOwnProperty","dt_txt","slice","createTimeLineWeather","timeLineWeather","k","key2","push","days","createNextDaysWeather","nextDaysWeather","dayOfWeek","getDay","avg","keysAmount","weatherReducer","timeReducer","dateArray","toDateString","split","sunriseTime","sunsetTime","switcherReducer","locationReducer","name","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunkMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84ea770f.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\n\r\ntype Props = {\r\n  isFetching: boolean;\r\n};\r\n\r\nconst LoadingSpinner: FC<Props> = ({ isFetching }) => {\r\n  return (\r\n    <div style={{ display: isFetching ? \"\" : \"none\" }} className=\"loading\">\r\n      <div>\r\n        <div className=\"c1\"></div>\r\n        <div className=\"c2\"></div>\r\n        <div className=\"c3\"></div>\r\n        <div className=\"c4\"></div>\r\n      </div>\r\n      <span>loading</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingSpinner;\r\n","import {\r\n  WeatherActionTypes,\r\n  LOAD_WEATHER_SUCCESS,\r\n  WeatherPayload,\r\n} from \"./types\";\r\n\r\nimport { AppThunk } from \"../rootTypes\";\r\nimport { setIsFetching } from \"../app/actions\";\r\nimport { setErrorMessage } from \"./../app/actions\";\r\nimport { batch } from \"react-redux\";\r\n\r\n//loadWeatherSuccess action is being listened by 3 reduers (weatherRed,timeRed,locationRed)\r\nexport const loadWeatherSuccess = (\r\n  payload: WeatherPayload\r\n): WeatherActionTypes => ({\r\n  type: LOAD_WEATHER_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const getWeather = (city: string): AppThunk<Promise<number[]>> => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const isChecked = getState().units.isChecked; //make and api call with fahrenheit if isChecked==true and with celsius if isChecked==false\r\n  const errorMessage = getState().app.errorMessage;\r\n  const api_key = process.env.REACT_APP_WEATHER_API_KEY;\r\n  dispatch(setIsFetching(true));\r\n  const response = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${api_key}&units=${\r\n      isChecked ? \"imperial\" : \"metric\"\r\n    }`\r\n  );\r\n  if (response.ok) {\r\n    var data = await response.json();\r\n    const payload: WeatherPayload = {\r\n      city: data.city,\r\n      weather: data.list,\r\n    };\r\n    batch(() => {\r\n      dispatch(loadWeatherSuccess(payload));\r\n      dispatch(setIsFetching(false));\r\n      errorMessage && dispatch(setErrorMessage(\"\"));\r\n    });\r\n  } else {\r\n    batch(() => {\r\n      dispatch(setIsFetching(false));\r\n      dispatch(setErrorMessage(response.statusText));\r\n    });\r\n\r\n    throw Error;\r\n  }\r\n\r\n  const { lat, lon }: { lat: number; lon: number } = data.city.coord; //latitude longitude\r\n  return [lat, lon];\r\n};\r\n","export const LOAD_WEATHER_SUCCESS = \"LOAD_WEATHER_SECCESS\";\r\n\r\nexport type TimeStamp = {\r\n  temp: number;\r\n  time: string;\r\n  icon: string;\r\n};\r\n\r\nexport type NextDay = {\r\n  day: string;\r\n  temp: number;\r\n};\r\n\r\ntype City = {\r\n  name: string;\r\n  country: string;\r\n  sunrise: number;\r\n  sunset: number;\r\n  coord: { lat: number; lon: number };\r\n};\r\n\r\ntype Weather = {\r\n  dt_txt: string;\r\n  main: {\r\n    humidity: number;\r\n    pressure: number;\r\n    sea_level: number;\r\n    temp: number;\r\n  };\r\n  weather: [\r\n    {\r\n      description: string;\r\n      icon: string;\r\n      main: string;\r\n    }\r\n  ];\r\n  wind: {\r\n    speed: number;\r\n  };\r\n};\r\n\r\nexport type WeatherState = {\r\n  readonly currentWeather: Weather;\r\n  readonly timeLine: TimeStamp[];\r\n  readonly nextDays: NextDay[];\r\n  isFetching?: boolean;\r\n};\r\n\r\nexport type WeatherPayload = {\r\n  city: City;\r\n  weather: Weather[];\r\n};\r\n\r\ntype LoadWeatherSuccessAction = {\r\n  type: typeof LOAD_WEATHER_SUCCESS;\r\n  payload: WeatherPayload;\r\n};\r\n\r\nexport type WeatherActionTypes = LoadWeatherSuccessAction;\r\n","import { TimeActionTypes, LOAD_TIME_SUCCESS } from \"./types\";\r\n\r\nimport { AppThunk } from \"../rootTypes\";\r\nimport { setIsFetching } from \"../app/actions\";\r\n\r\nexport const loadTimeSuccess = (time: string): TimeActionTypes => ({\r\n  type: LOAD_TIME_SUCCESS,\r\n  time,\r\n});\r\n\r\nexport const getTime = (lat: number, lng: number): AppThunk<void> => async (\r\n  dispatch\r\n) => {\r\n  dispatch(setIsFetching(true));\r\n  const api_key = process.env.REACT_APP_TIME_API_KEY;\r\n  const response = await fetch(\r\n    `http://api.timezonedb.com/v2.1/get-time-zone?key=${api_key}&format=json&by=position&lat=${lat}&lng=${lng}`\r\n  );\r\n  const data = await response.json();\r\n  dispatch(loadTimeSuccess(data.formatted));\r\n  dispatch(setIsFetching(false));\r\n};\r\n","export const LOAD_TIME_STARTED = \"LOAD_TIME_STARTED\";\r\nexport const LOAD_TIME_SUCCESS = \"LOAD_TIME_SUCCESS\";\r\nexport const LOAD_TIME_FAILURE = \"LOAD_TIME_FAILURE\";\r\n\r\nexport type TimeState = {\r\n  day: string;\r\n  month: string;\r\n  date: string;\r\n  year: string;\r\n  time: string;\r\n  sunrise: string;\r\n  sunset: string;\r\n};\r\n\r\ntype LoadTimeSuccessAction = {\r\n  type: typeof LOAD_TIME_SUCCESS;\r\n  time: string;\r\n};\r\n\r\nexport type TimeActionTypes = LoadTimeSuccessAction;\r\n","import {\r\n  SET_IS_INITIALISED,\r\n  SET_IS_FETCHING,\r\n  SET_ERROR_MESSAGE,\r\n  AppActionTypes,\r\n} from \"./types\";\r\nimport { AppThunk } from \"../rootTypes\";\r\n\r\nimport { getWeather } from \"../weather/actions\";\r\nimport { getTime } from \"../time/actions\";\r\n\r\nexport const setIsInitialized = (): AppActionTypes => ({\r\n  type: SET_IS_INITIALISED,\r\n});\r\n\r\nexport const setIsFetching = (payload: boolean): AppActionTypes => ({\r\n  type: SET_IS_FETCHING,\r\n  payload,\r\n});\r\n\r\nexport const setErrorMessage = (error: string): AppActionTypes => ({\r\n  type: SET_ERROR_MESSAGE,\r\n  error,\r\n});\r\n\r\nexport const getWeatherAndTime = (city: string): AppThunk<void> => async (\r\n  dispatch\r\n) => {\r\n  const coord: number[] = await dispatch(getWeather(city));\r\n  await dispatch(getTime(coord[0], coord[1])); //[latitude,longitude]\r\n};\r\n\r\nexport const initializeApp = () => async (dispatch: any) => {\r\n  //detect current location to recognize city name and then get weather and time for the city\r\n  const response = await fetch(\"http://ip-api.com/json\");\r\n  const data = await response.json();\r\n\r\n  await dispatch(getWeatherAndTime(data.city));\r\n  await dispatch(setIsInitialized());\r\n};\r\n","export const SET_IS_INITIALISED = \"SET_IS_INITIALIZED\";\r\nexport const SET_IS_FETCHING = \"SET_IS_FETCHING\";\r\nexport const SET_ERROR_MESSAGE = \"SET_ERROR_MESSAGE\";\r\n\r\nexport type AppState = {\r\n  isInitialized: boolean;\r\n  isFetching: boolean;\r\n  errorMessage: string;\r\n};\r\n\r\ntype SetIsInitialized = {\r\n  type: typeof SET_IS_INITIALISED;\r\n};\r\n\r\ntype SetIsFetching = {\r\n  type: typeof SET_IS_FETCHING;\r\n  payload: boolean;\r\n};\r\n\r\ntype SetErrorMessage = {\r\n  type: typeof SET_ERROR_MESSAGE;\r\n  error: string;\r\n};\r\n\r\nexport type AppActionTypes = SetIsInitialized | SetIsFetching | SetErrorMessage;\r\n","import React, { FC } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst Current: FC<any> = () => {\r\n  const {\r\n    city,\r\n    country,\r\n    day,\r\n    month,\r\n    date,\r\n    year,\r\n    time,\r\n    temp,\r\n    icon,\r\n    description,\r\n    isChecked,\r\n  } = useSelector((state: RootState) => ({\r\n    city: state.location.city,\r\n    country: state.location.country,\r\n    day: state.time.day,\r\n    month: state.time.month,\r\n    year: state.time.year,\r\n    date: state.time.date,\r\n    time: state.time.time,\r\n    temp: Math.round(state.weather.currentWeather.main.temp),\r\n    icon: state.weather.currentWeather.weather[0].icon,\r\n    description: state.weather.currentWeather.weather[0].description,\r\n    isChecked: state.units.isChecked,\r\n  }));\r\n\r\n  return (\r\n    <div className=\"current\">\r\n      <h1>\r\n        {city}, {country}\r\n      </h1>\r\n      <p>\r\n        {time} {day}, {date} {month} {year}\r\n      </p>\r\n      <img src={`http://openweathermap.org/img/wn/${icon}@4x.png`} alt=\"\" />\r\n      <h2>{description}</h2>\r\n      <h3>\r\n        {temp} <span> {isChecked ? \"℉\" : \"℃\"}</span>\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Current;\r\n","import React, { useRef, FC } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { getWeatherAndTime } from \"./../../../store/app/actions\";\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst Form: FC<any> = () => {\r\n  const input = useRef<HTMLInputElement>(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { isFetching, errorMessage } = useSelector((state: RootState) => ({\r\n    isFetching: state.app.isFetching,\r\n    errorMessage: state.app.errorMessage,\r\n  }));\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\r\n    e.preventDefault();\r\n\r\n    const node = input.current;\r\n\r\n    dispatch(getWeatherAndTime(node?.value as string));\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} action=\"\">\r\n      <input ref={input} type=\"text\" placeholder=\"city\" />\r\n      <p>{errorMessage}</p>\r\n      <button disabled={isFetching} type=\"submit\">\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { FC } from \"react\";\r\n\r\ntype Props = {\r\n  temp: number;\r\n  time: string;\r\n  icon: string;\r\n  isChecked: boolean;\r\n};\r\n\r\nconst TimeStamp: FC<Props> = ({ time, temp, icon, isChecked }) => {\r\n  return (\r\n    <div className=\"time-stamp\">\r\n      <div className=\"temp-at-specific-hour\">\r\n        <img src={`http://openweathermap.org/img/wn/${icon}@4x.png`} alt=\"\" />\r\n        <p>\r\n          {temp}\r\n          {isChecked ? \"℉\" : \"℃\"}\r\n        </p>\r\n      </div>\r\n      <span>{time}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeStamp;\r\n","import React, { FC } from \"react\";\r\nimport { useSelector, shallowEqual } from \"react-redux\";\r\n\r\nimport TimeStamp from \"./TimeStamp/TimeStamp\";\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst TimeLine: FC<any> = () => {\r\n  const { timeLine, isChecked } = useSelector(\r\n    (state: RootState) => ({\r\n      timeLine: state.weather.timeLine,\r\n      isChecked: state.units.isChecked,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  return (\r\n    <div className=\"cont\">\r\n      <div className=\"time-line\">\r\n        {timeLine.map((item, index) => (\r\n          <TimeStamp key={index} isChecked={isChecked} {...item} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TimeLine;\r\n","import React, { FC } from \"react\";\r\n\r\nimport Current from \"./Current/Current\";\r\nimport Form from \"./Form/Form\";\r\nimport TimeLine from \"./TimeLine/TimeLine\";\r\n\r\nconst MainInfo: FC<any> = () => {\r\n  return (\r\n    <div className=\"main-info\">\r\n      <Form />\r\n      <Current />\r\n      <TimeLine />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainInfo;\r\n","import React, { FC } from \"react\";\r\nimport { useSelector, batch } from \"react-redux\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { setIsChecked } from \"./../../store/switcher/actions\";\r\nimport { getWeather } from \"../../store/weather/actions\";\r\nimport { RootState } from \"../../store/rootTypes\";\r\n\r\nconst UnitsSwitcher: FC<any> = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const city = useSelector((state: RootState) => state.location.city);\r\n\r\n  const toggleCheck = () => {\r\n    batch(() => {\r\n      dispatch(setIsChecked());\r\n      dispatch(getWeather(city));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"temp-units\">\r\n      <p>Weather forecast</p>\r\n      <div className=\"toggle\">\r\n        <input onChange={toggleCheck} type=\"checkbox\" />\r\n        <label htmlFor=\"\">℃</label>\r\n        <label htmlFor=\"\">℉</label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnitsSwitcher;\r\n","import { SET_IS_CHECKED, SwitcherActionTypes } from \"./types\";\r\n\r\nexport const setIsChecked = (): SwitcherActionTypes => ({\r\n  type: SET_IS_CHECKED,\r\n});\r\n","export const SET_IS_CHECKED = \"SET_IS_CHECKED\";\r\n\r\nexport type SwitcherState = {\r\n  isChecked: boolean;\r\n};\r\n\r\ntype SetIsChecked = {\r\n  type: typeof SET_IS_CHECKED;\r\n};\r\n\r\nexport type SwitcherActionTypes = SetIsChecked;\r\n","import React, { FC } from \"react\";\r\n\r\ntype Props = {\r\n  text: string;\r\n  value: string;\r\n};\r\n\r\nconst WeatherDetail: FC<Props> = ({ text, value }) => {\r\n  return (\r\n    <li>\r\n      {text}: <span>{value}</span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default WeatherDetail;\r\n","import React, { FC } from \"react\";\r\nimport { useSelector, shallowEqual } from \"react-redux\";\r\n\r\nimport WeatherDetail from \"./WeatherDetail/WeatherDetail\";\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst WeatherDetails: FC<any> = () => {\r\n  type WeatherDetails = {\r\n    humidity: number;\r\n    pressure: number;\r\n    [\"sea level\"]: number;\r\n    [\"wind speed\"]: number;\r\n    sunrise: string;\r\n    sunset: string;\r\n    [propName: string]: any;\r\n  };\r\n\r\n  const weatherDetails: WeatherDetails = useSelector(\r\n    (state: RootState) => ({\r\n      humidity: state.weather.currentWeather.main.humidity,\r\n      pressure: state.weather.currentWeather.main.pressure,\r\n      [\"sea level\"]: state.weather.currentWeather.main.sea_level,\r\n      [\"wind speed\"]: state.weather.currentWeather.wind.speed,\r\n      sunrise: state.time.sunrise,\r\n      sunset: state.time.sunset,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  return (\r\n    <div className=\"weather-details\">\r\n      <h4>Weather details</h4>\r\n      <ul>\r\n        {Object.keys(weatherDetails).map((item, index) => (\r\n          <WeatherDetail key={index} text={item} value={weatherDetails[item]} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDetails;\r\n","import React, { FC } from \"react\";\r\n\r\ntype Props = {\r\n  day: string;\r\n  temp: number;\r\n  isChecked: boolean;\r\n};\r\n\r\nconst NextDay: FC<Props> = ({ day, temp, isChecked }) => {\r\n  return (\r\n    <li>\r\n      {day}\r\n      <span>\r\n        {temp} {isChecked ? \"℉\" : \"℃\"}\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default NextDay;\r\n","import React from \"react\";\r\n\r\nimport { useSelector, shallowEqual } from \"react-redux\";\r\n\r\nimport NextDay from \"./NextDay/NextDay\";\r\nimport { RootState } from \"../../../store/rootTypes\";\r\n\r\nconst NextDaysForecast = () => {\r\n  const { nextDays, isChecked } = useSelector(\r\n    (state: RootState) => ({\r\n      nextDays: state.weather.nextDays,\r\n      isChecked: state.units.isChecked,\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  return (\r\n    <div className=\"next-days-forecast\">\r\n      <h4>Next days</h4>\r\n      <ul>\r\n        {nextDays.map((item, index) => (\r\n          <NextDay key={index} isChecked={isChecked} {...item} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NextDaysForecast;\r\n","import React, { FC } from \"react\";\r\n\r\nimport WeatherDetails from \"./WeatherDetails/WeatherDetails\";\r\nimport NextDaysForecast from \"./NextDaysForecast/NextDaysForecast\";\r\n\r\nconst SideBar: FC<any> = () => {\r\n  return (\r\n    <aside className=\"side-bar\">\r\n      <WeatherDetails />\r\n      <NextDaysForecast />\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default SideBar;\r\n","import React, { useEffect, FC } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./index.scss\";\n\nimport LoadingSpinner from \"./components/LoadingSpinner/LoadingSpinner\";\nimport { initializeApp } from \"./store/app/actions\";\nimport MainInfo from \"./components/MainInfo/MainInfo\";\nimport UnitsSwitcher from \"./components/UnitsSwitcher/UnitsSwitcher\";\nimport SideBar from \"./components/SideBar/SideBar\";\n\nconst App: FC<any> = () => {\n  const { isInitialized, isFetching } = useSelector((state: any) => ({\n    isInitialized: state.app.isInitialized,\n    isFetching: state.app.isFetching,\n  }));\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initializeApp());\n  }, []);\n\n  if (isInitialized) {\n    return (\n      <main className=\"App\">\n        <LoadingSpinner isFetching={isFetching} />\n        <MainInfo />\n        <UnitsSwitcher />\n        <SideBar />\n      </main>\n    );\n  } else {\n    return <LoadingSpinner isFetching={isFetching} />;\n  }\n};\n\nexport default App;\n","import {\r\n  SET_IS_INITIALISED,\r\n  AppActionTypes,\r\n  AppState,\r\n  SET_IS_FETCHING,\r\n  SET_ERROR_MESSAGE,\r\n} from \"./types\";\r\n\r\nconst initialState: AppState = {\r\n  isInitialized: false,\r\n  isFetching: false,\r\n  errorMessage: \"\",\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppActionTypes): AppState => {\r\n  switch (action.type) {\r\n    case SET_IS_INITIALISED:\r\n      return {\r\n        ...state,\r\n        isInitialized: true,\r\n      };\r\n\r\n    case SET_IS_FETCHING:\r\n      return {\r\n        ...state,\r\n        isFetching: action.payload,\r\n      };\r\n    case SET_ERROR_MESSAGE:\r\n      return {\r\n        ...state,\r\n        errorMessage: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default appReducer;\r\n","export const convertMilisecToTime = (milisec) => {\r\n  //conver milisec to hh:mm format\r\n  const day = new Date(milisec * 1000);\r\n  if (day.getMinutes().toString().length != 2) {\r\n    return day.getHours() + \":0\" + day.getMinutes();\r\n  } else {\r\n    return day.getHours() + \":\" + day.getMinutes();\r\n  }\r\n};\r\n\r\n//---- BELOW ---- divide data from a weather api call into separate objects that are easier to work with\r\n\r\nexport const transformWeatherData = (data) => {\r\n  //refractor data from a weather api call into an object that is easier to work with\r\n  const formattedWeatherData = {};\r\n  data.forEach((item) => {\r\n    if (formattedWeatherData.hasOwnProperty(item.dt_txt.slice(0, 10))) {\r\n      formattedWeatherData[item.dt_txt.slice(0, 10)][item.dt_txt.slice(11)] = {\r\n        temp: item.main.temp,\r\n        icon: item.weather[0].icon,\r\n      };\r\n    } else {\r\n      formattedWeatherData[item.dt_txt.slice(0, 10)] = new Object();\r\n      formattedWeatherData[item.dt_txt.slice(0, 10)][item.dt_txt.slice(11)] = {\r\n        temp: item.main.temp,\r\n        icon: item.weather[0].icon,\r\n      };\r\n    }\r\n  });\r\n  return formattedWeatherData;\r\n};\r\n\r\nexport const createTimeLineWeather = (data) => {\r\n  //push into 'timeLineWeather array' 8 time stamps for displaying them on a timeLine\r\n  data = transformWeatherData(data);\r\n\r\n  const timeLineWeather = [];\r\n  let k = 0;\r\n  for (let key in data) {\r\n    for (let key2 in data[key]) {\r\n      if (k == 9) {\r\n        break;\r\n      }\r\n      k++;\r\n      timeLineWeather.push({\r\n        time: key2.slice(0, 5),\r\n        temp: Math.round(data[key][key2].temp),\r\n        icon: data[key][key2].icon,\r\n      });\r\n    }\r\n  }\r\n  return timeLineWeather;\r\n};\r\n\r\nvar days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nexport const createNextDaysWeather = (data) => {\r\n  //push into 'nextDaysWeather array' objects that contain 'name of a day' and 'temperature information'\r\n  data = transformWeatherData(data);\r\n\r\n  const nextDaysWeather = [];\r\n  for (let key in data) {\r\n    let day = new Date(key);\r\n    let dayOfWeek = days[day.getDay()];\r\n    let avg = 0;\r\n    let keysAmount = 0;\r\n    for (let key2 in data[key]) {\r\n      avg += data[key][key2].temp;\r\n      keysAmount += 1;\r\n    }\r\n    nextDaysWeather.push({\r\n      day: dayOfWeek,\r\n      temp: Math.round(avg / keysAmount),\r\n    });\r\n  }\r\n  return nextDaysWeather;\r\n};\r\n\r\n//---- ABOVE ---- divide data from a weather api call into separate objects that are easier to work with\r\n","import {\r\n  createNextDaysWeather,\r\n  createTimeLineWeather,\r\n} from \"./../helperFunctions\";\r\nimport {\r\n  WeatherState,\r\n  LOAD_WEATHER_SUCCESS,\r\n  WeatherActionTypes,\r\n} from \"./types\";\r\n\r\nconst initialState: WeatherState = {\r\n  currentWeather: {\r\n    dt_txt: \"\",\r\n    main: {\r\n      humidity: 0,\r\n      pressure: 0,\r\n      sea_level: 0,\r\n      temp: 0,\r\n    },\r\n    weather: [\r\n      {\r\n        description: \"\",\r\n        icon: \"\",\r\n        main: \"\",\r\n      },\r\n    ],\r\n    wind: {\r\n      speed: 0,\r\n    },\r\n  },\r\n  timeLine: [],\r\n  nextDays: [],\r\n  isFetching: false,\r\n};\r\n\r\nconst weatherReducer = (\r\n  state = initialState,\r\n  action: WeatherActionTypes\r\n): WeatherState => {\r\n  switch (action.type) {\r\n    case LOAD_WEATHER_SUCCESS:\r\n      const timeLine = createTimeLineWeather(action.payload.weather);\r\n      const nextDays = createNextDaysWeather(action.payload.weather);\r\n      return {\r\n        ...state,\r\n        currentWeather: action.payload.weather[0],\r\n        timeLine: timeLine,\r\n        nextDays: nextDays,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default weatherReducer;\r\n","import { TimeState, LOAD_TIME_SUCCESS, TimeActionTypes } from \"./types\";\r\nimport { LOAD_WEATHER_SUCCESS, WeatherActionTypes } from \"./../weather/types\";\r\nimport { convertMilisecToTime } from \"./../helperFunctions\";\r\n\r\nconst initialState: TimeState = {\r\n  day: \"\",\r\n  month: \"\",\r\n  date: \"\",\r\n  year: \"\",\r\n  time: \"\",\r\n  sunrise: \"\",\r\n  sunset: \"\",\r\n};\r\n\r\nconst timeReducer = (\r\n  state = initialState,\r\n  action: TimeActionTypes | WeatherActionTypes\r\n): TimeState => {\r\n  switch (action.type) {\r\n    case LOAD_TIME_SUCCESS: {\r\n      const day = new Date(action.time);\r\n      const dateArray = day.toDateString().split(\" \");\r\n      const time = action.time.slice(11, 16); //extract hh:mm only\r\n      return {\r\n        ...state,\r\n        day: dateArray[0],\r\n        month: dateArray[1],\r\n        date: dateArray[2],\r\n        year: dateArray[3],\r\n        time: time,\r\n      };\r\n    }\r\n    case LOAD_WEATHER_SUCCESS: {\r\n      const sunriseTime = convertMilisecToTime(action.payload.city.sunrise);\r\n      const sunsetTime = convertMilisecToTime(action.payload.city.sunset);\r\n      return {\r\n        ...state,\r\n        sunrise: sunriseTime,\r\n        sunset: sunsetTime,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default timeReducer;\r\n","import { SwitcherState, SwitcherActionTypes, SET_IS_CHECKED } from \"./types\";\r\n\r\nconst initialState: SwitcherState = {\r\n  isChecked: false,\r\n};\r\n\r\nconst switcherReducer = (\r\n  state = initialState,\r\n  action: SwitcherActionTypes\r\n): SwitcherState => {\r\n  switch (action.type) {\r\n    case SET_IS_CHECKED: {\r\n      return {\r\n        isChecked: !state.isChecked,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default switcherReducer;\r\n","import { WeatherActionTypes, LOAD_WEATHER_SUCCESS } from \"../weather/types\";\r\nimport { LocationState } from \"./types\";\r\n\r\nconst initialState: LocationState = {\r\n  country: \"\",\r\n  city: \"\",\r\n};\r\n\r\nconst locationReducer = (\r\n  state = initialState,\r\n  action: WeatherActionTypes\r\n): LocationState => {\r\n  switch (action.type) {\r\n    case LOAD_WEATHER_SUCCESS: {\r\n      const { name: city, country } = action.payload.city;\r\n      return {\r\n        country: country,\r\n        city: city,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default locationReducer;\r\n","import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nimport appReducer from \"./app/reducers\";\r\nimport weatherReducer from \"./weather/reducers\";\r\nimport timeReducer from \"./time/reducers\";\r\nimport switcherReducer from \"./switcher/reducers\";\r\nimport locationReducer from \"./location/reducers\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  app: appReducer,\r\n  location: locationReducer,\r\n  weather: weatherReducer,\r\n  time: timeReducer,\r\n  units: switcherReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  compose(\r\n    applyMiddleware(thunkMiddleware),\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\r\n      (window as any).__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/configureStore\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}